swagger: "2.0"
info:
  version: 1.0.0
  title: Hypothesis
  description: |
    # Hypothesis API documentation
    本文档展示了Hypothesis公共HTTP API的各项细节。它旨在帮助希望将Hypothesis总体
    集成到自己项目的开发者。

    ## Authorization

    ### API tokens
    本文档展示的部分API URL需要有效的API token。
    To use these API URLs you should:
    为了使用这些API URLs你需要：
    1. 在[Hypothesis developer page](https://hypothes.is/account/developer)
    页面生成自己的API token (你必须要首先登陆后才能看到此页面).
    2. 将API token放到你的请求的`Authorization`的头部。//TEST

    *Example request:*

        GET /api
        Host: hypothes.is
        Accept: application/json
        Authorization: Bearer 6879-nUYZBzc15MsjDDicz-0xEaKBrVGGruwCHW9-p8BMqq4

    (将`6879-nUYZBzc15MsjDDicz-0xEaKBrVGGruwCHW9-p8BMqq4` 替换成自己的API token.)

    ### Client credentials direct authorization
    用户创建API由“第三方帐户”客户端使用。
    这些端点通过HTTP Basic Auth进行身份验证，使用您的Client ID作为用户名，您的Client 密码作为密码。

    例如，客户端的详细信息如下

        Client ID: 96653f8e-80be-11e6-b32b-c7bcde86613a
        Client Secret: E-hReVMuRyZbyr1GikieEw4JslaM6sDpb18_9V59PFw

    你可以在[RFC7617中所描述的](https://tools.ietf.org/html/rfc7617)计算标注的头部:

        $ echo -n '96653f8e-80be-11e6-b32b-c7bcde86613a:E-hReVMuRyZbyr1GikieEw4JslaM6sDpb18_9V59PFw' | base64
        OTY2NTNmOGUtODBiZS0xMWU2LWIzMmItYzdiY2RlODY2MTNhOkUtaFJlVk11UnlaYnlyMUdpa2llRXc0SnNsYU02c0RwYjE4XzlWNTlQRnc=

    *Example request:*

        POST /users
        Host: hypothes.is
        Accept: application/json
        Content-Type: application/json
        Authorization: Basic OTY2NTNmOGUtODBiZS0xMWU2LWIzMmItYzdiY2RlODY2MTNhOkUtaFJlVk11UnlaYnlyMUdpa2llRXc0SnNsYU02c0RwYjE4XzlWNTlQRnc=

        {
          "authority": "example.com",
          "username": "jbloggs1",
          "email": "jbloggs1@example.com"
        }

  termsOfService: https://hypothes.is/terms-of-service
  license:
    name: BSD (2-Clause)
    url: https://github.com/hypothesis/h/blob/master/LICENSE
host: hypothes.is
basePath: /api
schemes:
  - https
consumes:
  - application/json
produces:
  - application/json
securityDefinitions:
  developerAPIKey:
    type: apiKey
    description: 利用一个开发者的API key授权.
    name: Authorization
    in: header
  authClientCredentials:
    type: basic
    description: 通过HTTP Basic Auth的OAuth用户证书来授权.
security:
  - developerAPIKey: []
paths:
  /:
    get:
      summary: Service root
      description: 给出由API提供的资源链表。
      operationId: root
      responses:
        '200':
          description: Success
      security: []
  /annotations:
    post:
      summary: Create a new annotation
      operationId: createAnnotation
      parameters:
        - name: annotation
          in: body
          description: 新建一个标注。
          required: true
          schema:
            $ref: '#/definitions/NewAnnotation'
      responses:
        '200':
          description: 成功新建一个标注。
          schema:
            $ref: '#/definitions/Annotation'
        '400':
          description: 通过你的请求不能新建标注。
          schema:
            $ref: '#/definitions/Error'
  /annotations/{id}:
    get:
      summary: Fetch an annotation
      operationId: fetchAnnotation
      parameters:
        - name: id
          in: path
          description: 返回标注的ID。
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Annotation'
        '404':
          description: 没有找到该标注或无权访问。
          schema:
            $ref: '#/definitions/Error'
    patch:
      summary: Update an annotation
      description: |     
        该端点在`PATCH`和`PUT`两种请求方式下都可以使用。
        两个端点都具有PATCH特性，如[RFC5789](https://tools.ietf.org/html/rfc5789#section-1)中所定义的，
        这意味着请求体不必包括整个标注对象。

        新的实现应该使用`PATCH`请求方法。现有的实现可以在`PUT`方式下工作，但应切换到`PATCH`方式。

      operationId: updateAnnotation
      parameters:
        - name: id
          in: path
          description: ID of annotation to return
          required: true
          type: string
        - name: annotation
          in: body
          description: 更新标注内容
          required: true
          schema:
            $ref: '#/definitions/NewAnnotation'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Annotation'
        '400':
          description: Could not create annotation from your request
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Annotation not found or no permission to update
          schema:
            $ref: '#/definitions/Error'
    delete:
      summary: Delete an annotation
      operationId: deleteAnnotation
      parameters:
        - name: id
          in: path
          description: ID of annotation to return
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            type: object
            required:
              - deleted
              - id
            properties:
              deleted:
                type: boolean
                enum:
                  - true
              id:
                type: string
        '404':
          description: Annotation not found or no permission to delete
          schema:
            $ref: '#/definitions/Error'
  /profile:
    get:
      summary: Get the user's profile
      description: >
        This can either be accessed with an API key, in which case it will show
        the authenticated user's profile, or without, in which case it will show
        information for a logged-out profile, including only public groups for
        the current authority.
      parameters:
        - name: authority
          in: query
          description: >
            The current authority if the user is not logged in.
          required: false
          type: string
          default: "hypothes.is"
      responses:
        '200':
          description: Profile information
          schema:
            $ref: '#/definitions/Profile'
  /search:
    get:
      summary: Search for annotations
      operationId: search
      parameters:
        - name: limit
          in: query
          description: The maximum number of annotations to return.
          required: false
          type: integer
          minimum: 0
          maximum: 200
          default: 20
        - name: offset
          in: query
          description: >
            The minimum number of initial annotations to skip. This is
            used for pagination.
          required: false
          type: integer
          default: 0
          minimum: 0
        - name: sort
          in: query
          description: The field by which annotations should be sorted.
          required: false
          type: string
          default: updated
        - name: order
          in: query
          description: The order in which the results should be sorted.
          required: false
          type: string
          enum: [asc, desc]
          default: desc
        - name: uri
          in: query
          description: |
            Limit the results to annotations matching the specific URI or equivalent URIs.

            URI can be a URL (a web page address) or a URN representing another kind of resource such as DOI (Digital Object Identifier) or a PDF fingerprint.
          required: false
          type: string
        - name: url
          in: query
          description: |
            Alias of `uri`.
          required: false
          type: string
        - name: user
          in: query
          description: Limit the results to annotations made by the specified user.
          required: false
          type: string
        - name: group
          in: query
          description: Limit the results to annotations made in the specified group.
          required: false
          type: string
        - name: tag
          in: query
          description: Limit the results to annotations tagged with the specified value.
          required: false
          type: string
        - name: any
          in: query
          description: |
            Limit the results to annotations in which one of a number of common fields contain the passed value.
          required: false
          type: string
      responses:
        '200':
          description: Search results
          schema:
            $ref: '#/definitions/SearchResults'
  /users:
    post:
      summary: Create a new user
      description: |
        Only for specific auth clients, this API call allows clients with a
        designated authority to create users within their authority.
      operationId: createUser
      parameters:
        - name: user
          in: body
          description: User to be created
          required: true
          schema:
            $ref: '#/definitions/NewUser'
      responses:
        '200':
          description: User successfully created
          schema:
            $ref: '#/definitions/User'
        '400':
          description: 无法响应你的请求创建用户
          schema:
            $ref: '#/definitions/Error'
      security:
        - authClientCredentials: []
  /users/{username}:
    patch:
      summary: Update an existing user
      description: |
        只针对具体授权的客户端, 此API调用允许有指定权限的客户端
        用他们的权限更新用户
      operationId: updateUser
      parameters:
        - name: user
          in: body
          description: User to be created
          required: true
          schema:
            $ref: '#/definitions/UpdateUser'
      responses:
        '200':
          description: 成功更新用户信息
          schema:
            $ref: '#/definitions/User'
        '400':
          description: 不能响应你的要求更新用户信息
          schema:
            $ref: '#/definitions/Error'
      security:
        - authClientCredentials: []
  /groups/{id}/members/{user}:
    delete:
      summary: Remove a member from a group
      operationId: deleteGroupMember
      parameters:
        - name: id
          in: path
          description: 组的公共ID
          required: true
          type: string
        - name: user
          in: path
          description: |
            从组中移除的客户。现在只有值“me”是被支持的,
            代表当前已认证的用户. 
          type: string
          enum: ['me']
      responses:
        '204':
          description: Success
        '404':
          description: 未找到组
          schema:
            $ref: '#/definitions/Error'
definitions:
  NewAnnotation:
    $ref: './schemas/annotation-schema.json'
  Annotation:
    allOf:
      - $ref: '#/definitions/NewAnnotation'
      - required:
        - id
        properties:
          id:
            type: string
  Error:
    type: object
    required:
      - status
    properties:
      status:
        type: string
        enum:
          - failure
      reason:
        type: string
        description: 对失败原因的可读性描述
  SearchResults:
    type: object
    required:
      - rows
      - total
    properties:
      rows:
        type: array
        items:
          $ref: '#/definitions/Annotation'
      total:
        description: 与查询匹配的结果的总数
        type: integer
  NewUser:
    $ref: './schemas/new-user-schema.json'
  UpdateUser:
    $ref: './schemas/update-user-schema.json'
  User:
    $ref: './schemas/user-schema.json'
  Profile:
    $ref: './schemas/profile-schema.json'
